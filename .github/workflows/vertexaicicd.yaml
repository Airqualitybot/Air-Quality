name: Deploy to Vertex AI

on:
  push:
    branches:
      - vertexai  # Trigger the workflow on push to this branch

jobs:
  deploy-pipeline:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 3: Configure Docker Authentication for GCR
      - name: Configure Docker Authentication
        run: gcloud auth configure-docker

      # Step 4: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build \
            --build-arg GCP_PROJECT=${{ secrets.GCP_PROJECT }} \
            --build-arg SECRET_NAME=service-account-key \
            -t gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest \
            -f ./vertex_testing/Dockerfile ./vertex_testing

      # Step 5: Push Docker Image to GCR
      - name: Push Docker Image
        run: docker push gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest

      # Step 6: Run Docker Container with Secret Fetching
      - name: Run Docker Container
        run: |
          docker run \
            -e GCP_PROJECT=${{ secrets.GCP_PROJECT }} \
            -e SECRET_NAME=service-account-key \
            gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest

      # Step 7: Trigger Vertex AI Training Job
      - name: Trigger Vertex AI Training Job
        id: trigger_training
        run: |
          echo "Triggering Vertex AI Training Job..."
          JOB_ID=$(gcloud ai custom-jobs create \
            --region=us-central1 \
            --display-name=pm25-training-job \
            --worker-pool-spec=machine-type=n1-standard-4,replica-count=1,container-image-uri=gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest \
            --args="--output-path=gs://airquality-mlops-rg/weights/model/" \
            --format="value(name)")

          if [ -z "$JOB_ID" ]; then
            echo "ERROR: Training job creation failed."
            exit 1
          fi

          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV
          echo "Training job triggered successfully with JOB_ID: $JOB_ID"

      # Step 8: Wait for Training Job
      - name: Wait for Training Job
        run: |
          echo "Waiting for training job ${{ env.JOB_ID }} to complete..."
          MAX_RETRIES=60
          RETRY_COUNT=0

          while true; do
            JOB_STATE=$(gcloud ai custom-jobs describe ${{ env.JOB_ID }} --region=us-central1 --format="value(state)")
            echo "Training job status: $JOB_STATE"

            if [[ "$JOB_STATE" == "SUCCEEDED" ]]; then
              echo "Training job completed successfully."
              break
            elif [[ "$JOB_STATE" == "FAILED" || "$JOB_STATE" == "CANCELLED" ]]; then
              echo "ERROR: Training job failed or was cancelled with status: $JOB_STATE"
              exit 1
            fi

            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [[ "$RETRY_COUNT" -ge "$MAX_RETRIES" ]]; then
              echo "ERROR: Training job did not complete within the maximum retries."
              exit 1
            fi

            sleep 60
          done

      # Step 9: Retrieve the Model ID from Vertex AI Model Registry
      - name: Retrieve Model from Registry
        id: get_model
        run: |
          echo "Retrieving model from Vertex AI Model Registry..."
          MODEL_ID=$(gcloud ai models list \
            --region=us-central1 \
            --filter="display_name=pm25-model" \
            --format="value(name)" \
            --sort-by="~updateTime" | head -n 1)

          if [ -z "$MODEL_ID" ]; then
            echo "ERROR: Model not found in Vertex AI Model Registry."
            exit 1
          fi

          echo "MODEL_ID=$MODEL_ID" >> $GITHUB_ENV
          echo "Retrieved MODEL_ID: $MODEL_ID"

      # Step 10: Deploy Model to Endpoint
      - name: Deploy Model to Endpoint
        run: |
          echo "Deploying model ${{ env.MODEL_ID }} to endpoint ${{ env.ENDPOINT_NAME }}..."
          gcloud ai endpoints deploy-model ${{ env.ENDPOINT_NAME }} \
            --region=us-central1 \
            --model=${{ env.MODEL_ID }} \
            --display-name=pm25-model-deployment \
            --machine-type=n1-standard-4 \
            --traffic-split=0=100 \
            --service-account=airquality@airquality-438719.iam.gserviceaccount.com
