name: Deploy to Vertex AI check

on:
  push:
    branches:
      - vertexai  # Trigger the workflow on push to this branch

jobs:
  deploy-pipeline:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 3: Configure Docker Authentication for GCR
      - name: Configure Docker Authentication
        run: |
          gcloud auth configure-docker

      # Step 4: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest -f ./vertex_testing/Dockerfile ./vertex_testing

      run: |
          echo "${{ secrets.GCP_SA_KEY }}" > /tmp/service_account_key.json

          docker run --rm \
            -v /tmp/key.json:/app/key.json \
            -e GOOGLE_APPLICATION_CREDENTIALS=/app/key.json \
            gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest


      # Step 5: Push Docker Image to GCR
      - name: Push Docker Image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest

      - name: Trigger Vertex AI Training Job
        id: trigger_training
        run: |
          echo "Triggering Vertex AI Training Job..."
          JOB_ID=$(gcloud ai custom-jobs create \
            --region=us-central1 \
            --display-name=pm25-training-job \
            --worker-pool-spec=machine-type=n1-standard-4,replica-count=1,container-image-uri=gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest \
            --output-uri-prefix=gs://airquality-mlops-rg/weights/model/model.pkl \
            --format="value(name)")

          if [ -z "$JOB_ID" ]; then
            echo "ERROR: Training job creation failed."
            exit 1
          fi

          echo "Training job triggered successfully with JOB_ID: $JOB_ID"
          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV

      # Step 6: Upload the Model to Vertex AI and Extract the Most Recent Model ID
      - name: Upload Model to Vertex AI
        id: upload_model
        run: |
          echo "Uploading model to Vertex AI..."
          gcloud ai models upload \
            --region=us-central1 \
            --display-name=pm25-model \
            --container-image-uri=gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest

          echo "Model uploaded. Querying the most recent MODEL_ID..."
          MODEL_ID=$(gcloud ai models list \
            --region=us-central1 \
            --filter="display_name=pm25-model" \
            --format="value(name)" \
            --sort-by="~updateTime" | head -n 1)

          if [ -z "$MODEL_ID" ]; then
            echo "ERROR: MODEL_ID is empty. Exiting workflow."
            exit 1
          fi

          echo "MODEL_ID=$MODEL_ID" >> $GITHUB_ENV
          echo "Retrieved the most recent MODEL_ID: $MODEL_ID"
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

      # Step 7: Create or Reuse an Endpoint
      - name: Create or Reuse Endpoint
        id: create_endpoint
        run: |
          echo "Checking for existing endpoint..."
          ENDPOINT_NAME=$(gcloud ai endpoints list --region=us-central1 --filter="display_name='pm25-endpoint'" --format="value(name)")

          if [ -z "$ENDPOINT_NAME" ]; then
            echo "No existing endpoint found. Creating a new one..."
            ENDPOINT_NAME=$(gcloud ai endpoints create --region=us-central1 --display-name=pm25-endpoint --format="value(name)")
          fi

          if [ -z "$ENDPOINT_NAME" ]; then
            echo "ERROR: Failed to create or retrieve endpoint. Exiting workflow."
            exit 1
          fi

          echo "ENDPOINT_NAME=$ENDPOINT_NAME" >> $GITHUB_ENV
          echo "Retrieved or created ENDPOINT_NAME: $ENDPOINT_NAME"


      # Step 8: Deploy Model to Endpoint 
      - name: Deploy Model to Endpoint
        run: |
          echo "Deploying model $MODEL_ID to endpoint $ENDPOINT_NAME..."
          gcloud ai endpoints deploy-model $ENDPOINT_NAME \
            --region=us-central1 \
            --model=$MODEL_ID \
            --display-name=pm25-model-deployment \
            --machine-type=n1-standard-4 \
            --traffic-split=0=100 \
            --service-account=$CUSTOM_SERVICE_ACCOUNT

        env:
          MODEL_ID: ${{ env.MODEL_ID }}
          ENDPOINT_NAME: ${{ env.ENDPOINT_NAME }}
          CUSTOM_SERVICE_ACCOUNT: airquality@airquality-438719.iam.gserviceaccount.com
