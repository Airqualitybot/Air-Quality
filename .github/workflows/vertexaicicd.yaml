name: Deploy to Vertex AI

on:
  push:
    branches:
      - vertexai  # Trigger the workflow on push to this branch

jobs:
  deploy-pipeline:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 3: Configure Docker Authentication for GCR
      - name: Configure Docker Authentication
        run: |
          gcloud auth configure-docker

      # Step 4: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest \
          --build-arg GCP_SA_KEY="${{ secrets.GCP_SA_KEY }}" \
          -f ./vertex_testing/Dockerfile ./vertex_testing

      # Step 5: Push Docker Image to GCR
      - name: Push Docker Image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest

      # Step 6: Trigger Vertex AI Training Job
      - name: Trigger Vertex AI Training Job
        id: trigger_training
        run: |
          echo "Triggering Vertex AI Training Job..."
          JOB_ID=$(gcloud ai custom-jobs create \
            --region=us-central1 \
            --display-name=pm25-training-job \
            --worker-pool-spec=machine-type=n1-standard-4,replica-count=1,container-image-uri=gcr.io/${{ secrets.GCP_PROJECT }}/vertex-training-image:latest \
            --args="--output-path=gs://airquality-mlops-rg/weights/model/" \
            --model-display-name=pm25-model \
            --format="value(name)")

          if [ -z "$JOB_ID" ]; then
            echo "ERROR: Training job creation failed."
            exit 1
          fi

          echo "Training job triggered successfully with JOB_ID: $JOB_ID"
          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV

      # Step 7: Wait for Training Job to Complete
      - name: Wait for Training Job
        run: |
          echo "Waiting for training job ${{ env.JOB_ID }} to complete..."
          gcloud ai custom-jobs describe ${{ env.JOB_ID }} --region=us-central1 --format="json" > job_status.json
          JOB_STATE=$(jq -r '.state' job_status.json)
          while [[ "$JOB_STATE" != "SUCCEEDED" && "$JOB_STATE" != "FAILED" && "$JOB_STATE" != "CANCELLED" ]]; do
            echo "Training job in progress: $JOB_STATE"
            sleep 60
            gcloud ai custom-jobs describe ${{ env.JOB_ID }} --region=us-central1 --format="json" > job_status.json
            JOB_STATE=$(jq -r '.state' job_status.json)
          done
          if [[ "$JOB_STATE" == "FAILED" || "$JOB_STATE" == "CANCELLED" ]]; then
            echo "Training job failed or cancelled: $JOB_STATE"
            exit 1
          fi
          echo "Training job completed successfully."

      # Step 8: Retrieve the Model ID from Vertex AI Model Registry
      - name: Retrieve Model from Registry
        id: get_model
        run: |
          echo "Retrieving model from Vertex AI Model Registry..."
          MODEL_ID=$(gcloud ai models list \
            --region=us-central1 \
            --filter="display_name=pm25-model" \
            --format="value(name)" \
            --sort-by="~updateTime" | head -n 1)

          if [ -z "$MODEL_ID" ]; then
            echo "ERROR: Model not found in Vertex AI Model Registry."
            exit 1
          fi

          echo "MODEL_ID=$MODEL_ID" >> $GITHUB_ENV
          echo "Retrieved MODEL_ID: $MODEL_ID"

      # Step 9: Create or Reuse Endpoint
      - name: Create or Reuse Endpoint
        id: create_endpoint
        run: |
          echo "Checking for existing endpoint..."
          ENDPOINT_NAME=$(gcloud ai endpoints list --region=us-central1 --filter="display_name='pm25-endpoint'" --format="value(name)")

          if [ -z "$ENDPOINT_NAME" ]; then
            echo "No existing endpoint found. Creating a new one..."
            ENDPOINT_NAME=$(gcloud ai endpoints create --region=us-central1 --display-name=pm25-endpoint --format="value(name)")
          fi

          if [ -z "$ENDPOINT_NAME" ]; then
            echo "ERROR: Failed to create or retrieve endpoint. Exiting workflow."
            exit 1
          fi

          echo "ENDPOINT_NAME=$ENDPOINT_NAME" >> $GITHUB_ENV
          echo "Retrieved or created ENDPOINT_NAME: $ENDPOINT_NAME"

      # Step 10: Deploy Model to Endpoint
      - name: Deploy Model to Endpoint
        run: |
          echo "Deploying model ${{ env.MODEL_ID }} to endpoint ${{ env.ENDPOINT_NAME }}..."
          gcloud ai endpoints deploy-model ${{ env.ENDPOINT_NAME }} \
            --region=us-central1 \
            --model=${{ env.MODEL_ID }} \
            --display-name=pm25-model-deployment \
            --machine-type=n1-standard-4 \
            --traffic-split=0=100 \
            --service-account=$CUSTOM_SERVICE_ACCOUNT

        env:
          MODEL_ID: ${{ env.MODEL_ID }}
          ENDPOINT_NAME: ${{ env.ENDPOINT_NAME }}
          CUSTOM_SERVICE_ACCOUNT: airquality@airquality-438719.iam.gserviceaccount.com
