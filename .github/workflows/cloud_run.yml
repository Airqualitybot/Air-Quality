# name: Deploy to Vertex AI

# on:
#   push:
#     branches:
#       - vertexai  # Trigger the workflow on push to this branch

# jobs:
#   deploy-pipeline:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout the Repository
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       # Step 2: Authenticate with Google Cloud
#       - name: Authenticate with Google Cloud
#         uses: google-github-actions/auth@v1
#         with:
#           credentials_json: ${{ secrets.GCP_SA_KEY }}

#       # Step 3: Configure Docker Authentication for GCR
#       - name: Configure Docker Authentication
#         run: gcloud auth configure-docker

#       # Step 2: Write Service Account Key to a Temporary File
#       - name: Write Service Account Key
#         run: echo "${{ secrets.GCP_SA_KEY }}" > /tmp/service_account_key.json

#       # Step 4: Build Docker Image
#       - name: Build Docker Image
#         run: |
#           docker build \
#             --build-arg GCP_PROJECT=${{ secrets.GCP_PROJECT }} \
#             --build-arg SECRET_NAME=service-account-key \
#             -t gcr.io/${{ secrets.GCP_PROJECT }}/cloud-image:latest \
#             -f ./cloud_run/Dockerfile ./cloud_run
      
#       - name: Test Docker Image
#         run: |
#           docker run --rm \
#             -e GOOGLE_APPLICATION_CREDENTIALS=/app/service_account_key.json \
#             -v /tmp/service_account_key.json:/app/service_account_key.json:ro \
#             gcr.io/${{ secrets.GCP_PROJECT }}/cloud-image:latest

#       # Step 5: Push Docker Image to GCR
#       - name: Push Docker Image
#         run: docker push gcr.io/${{ secrets.GCP_PROJECT }}/cloud-image:latest


name: Model Training and Storage Pipeline
on:
  push:
    branches:
      - vertexai
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  IMAGE_NAME: "cloud_run"
  REGISTRY: "us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/gcr.io"
  GCS_BUCKET: "airquality-mlops-rg"

jobs:
  model_pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Clean up Docker
        run: docker system prune -af --volumes

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker us-east1-docker.pkg.dev --quiet

      - name: Create Docker Network
        run: docker network create mlflow-network

      - name: Build and Push Docker Image
        run: |
          echo "Building Docker image..."
          docker build -f cloud_run/Dockerfile -t $REGISTRY/$IMAGE_NAME:latest .
          echo "Pushing image to Artifact Registry..."
          docker push $REGISTRY/$IMAGE_NAME:latest
          
      - name: Run Model Training Script
        run: |
          echo "Starting model training..."
          docker run --rm \
          -v $(pwd):/app \
          -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json \
          $REGISTRY/$IMAGE_NAME:latest \
          python cloud_run/train.py
          echo "Model training completed."

      - name: Notify on Success
        if: success()
        run: |
          echo "✅ Pipeline completed successfully:"
          echo "- Model trained"
          echo "- Model uploaded to GCS bucket: $GCS_BUCKET"
          echo "- Docker image pushed to: $REGISTRY/$IMAGE_NAME:latest"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Pipeline failed:"
          echo "- Check the logs above for detailed error messages"
          echo "- Verify GCP permissions and credentials"
          echo "- Ensure all required services are enabled"

      - name: Cleanup
        if: always()
        run: |
          echo "Performing cleanup..."
          rm -f model_output/best_model.pth
          docker system prune -af --volumes
          echo "Cleanup completed."
